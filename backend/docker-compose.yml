services:
  # Django后端服务
  backend:
    build:
      context: ./
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py makemigrations && 
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - GDAL_LIBRARY_PATH=/usr/lib/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/libgeos_c.so
      - PYTHONUNBUFFERED=1
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network

  pipeline:
    build:
      context: ./
      dockerfile: Dockerfile
    # 启动命令，只负责运行数据管道
    command: >
      sh -c "echo 'Waiting for database...' && 
             sleep 10 && 
             python data_pipeline/run_pipeline.py"
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
      - GDAL_LIBRARY_PATH=/usr/lib/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/libgeos_c.so
      - PYTHONUNBUFFERED=1
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    # 如果管道失败了，可以配置自动重启
    restart: on-failure

  database:
    image: postgis/postgis:16-3.4
    container_name: postgres_container
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d mydb" ]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  postgres_data: {}

networks:
  app-network:
    driver: bridge